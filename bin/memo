#!/bin/bash

# Requires npm i -g mermaid-filter and TeXLive

set -e

# print usage
usage() {
    echo "Usage: $(basename $0) [-DNAME=VALUE ...] your-markdown-file.md [single|double]"
    exit 1
}

# initialize Git branch and revision
init_git_info() {
    BRANCH="unknown"
    REVISION="unknown"

    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        if git rev-parse HEAD > /dev/null 2>&1; then
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            REVISION=$(git rev-parse --short=7 HEAD)
            if ! git diff-index --quiet HEAD --; then
                REVISION="${REVISION}*"
            fi
        else
            BRANCH="empty"
            REVISION="empty"
        fi
    fi
}

# parse layout option
parse_layout_option() {
    if [ "$1" = "single" ]; then
        LAYOUT_OPTION=""
    elif [ "$1" = "double" ]; then
        LAYOUT_OPTION="--variable classoption=twocolumn"
    else
        echo "Invalid layout option. Use 'single' or 'double'."
        exit 1
    fi
}

# Check for minimum number of arguments
if [ $# -lt 1 ]; then
    usage
fi

# Initialize variables for m4 -D parameters
TS=$(date "+%Y-%m-%d %H:%M" | awk '{ printf "%s", $0 }')
D=$(echo "$TS" | cut -d ' ' -f 1)
T=$(echo "$TS" | cut -d ' ' -f 2)

# Initialize Git branch and revision
init_git_info

# Initialize m4 parameters
M4_PARAMS="-D__DATE__=$D -D__TIME__=$T -D__BRANCH__=\"$BRANCH\" -D__REVISION__=\"$REVISION\""
PANDOC_TEMPLATES_DIR="$HOME/.local/share/pandoc/templates"

# Parse -D parameters and Markdown file
while [ $# -gt 0 ]; do
    case "$1" in
        -D*)
            M4_PARAMS="$M4_PARAMS $1"
            shift
            ;;
        *.md)
            MD=$1
            shift
            break
            ;;
        *)
            usage
            ;;
    esac
done

# Check if a Markdown file was provided
if [ -z "$MD" ]; then
    usage
fi

# Parse layout option
LAYOUT=${1:-single}
parse_layout_option "$LAYOUT"

DIR=$(dirname "$MD")
BASENAME=$(basename "$MD" .md)
PDF="$DIR/${BASENAME}.pdf"
BIB="$DIR/${BASENAME}.bib"
PREPROCESSED_MD="${BASENAME}_preprocessed.md"
ERROR_FILE="mermaid-filter.err"
M4_PARAMS="$M4_PARAMS -D__FILENAME__=$MD"

# Preprocess the Markdown file with m4
{
    echo "changequote(«, »)"
    echo "changecom(«@@»)"
    cat "$MD"
} | m4 $M4_PARAMS - > "$PREPROCESSED_MD"

# Use -t latex -o $MD.tex to get LaTeX output instead of PDF
if [ -f "$BIB" ]; then
    if [ -z "$BIB_OPTION" ]; then
        BIB_OPTION="--bibliography=$BIB"
    else
        BIB_OPTION="$BIB_OPTION --bibliography=$BIB"
    fi
    BIB_OPTION="$BIB_OPTION --citeproc"
fi

cd "$DIR" && pandoc --pdf-engine=xelatex \
    --from markdown \
    --variable papersize=a4 \
    --template=custom_eisvogel --listings \
    --csl=$PANDOC_TEMPLATES_DIR/ieee-with-url.csl \
    -F mermaid-filter \
    $LAYOUT_OPTION \
    $BIB_OPTION \
    -s "$PREPROCESSED_MD" -o "$PDF"

# Clean up the preprocessed file
if [ -f "$PREPROCESSED_MD" ]; then
    rm "$PREPROCESSED_MD"
fi

# Clean up mermaid's error file if it's empty
if [ -f "$ERROR_FILE" ] && [ ! -s "$ERROR_FILE" ]; then
    rm "$ERROR_FILE"
fi

echo "PDF generated at $PDF"
open "$PDF"
